.template on
using System;
using System.Collections.Generic;
using System.Diagnostics;
.if string(@transaction)
using System.Transactions;
.endif
using BusterWood.Testing;
using State = $(../@cs-namespace).$(@name:p)StateMachine.State;
using Event = $(../@cs-namespace).$(@name:p)StateMachine.Event;
using Actions = $(../@cs-namespace).$(@name:p)StateMachine.Actions;

namespace $(../@cs-namespace)
{
	/// <summary>Tests for state machine implementation of $(@name)</summary>
	/// <remarks>GENERATED CODE - any change to this code will be lost when the code is regenerated.</remarks>
	public partial class $(@name:p)StateMachineTests
	{
		readonly $(@name:p)StateMachine _sm;
		readonly List<Actions> _called = new List<Actions>();
		int actionIdx = 0;

		public $(@name:p)StateMachineTests() 
		{
			CreateStateMachine();
			_sm.AfterAction += (evt, act, elapsed) => _called.Add(act);
		}

		partial static void CreateStateMachine();

		private void AssertAction(Test t, Actions expected) 
		{
			if (_called.Count >= actionIdx)
				t.Error($"Action {expected} was not called");
			else if (_called[actionIdx] != expected)
				t.Error($"Expected action {expected} at index {actionIdx} but was {_called[actionIdx]}");
			actionIdx++;
		}
.//TODO: we need to test invalid events for states
.//TODO: test catches
.foreach state[not(@terminal) and not(@name='default')]
. foreach event

		public void on_$(@on:_)_when_$(../@name:_)(Test t) 
		{
			_sm.SetState(State.$(../@name:p));
			_sm.HandleEvent(Event.$(@on:p));
			if (_sm.Current != State.$(@next??../@name:p))
				t.Error($"Expected state to be {State.$(@next??../@name:p)} but was {_sm.Current}");

.  foreach do
			AssertAction(t, Actions.$(text():p));
.  endfor
		}
. endfor
.endfor
	}
}