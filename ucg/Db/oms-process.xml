<?xml version="1.0" encoding="utf-8" ?>
<oms cs-namespace="BusterWood.OpenOms">
  
  <script name="investments" transaction="true">
    <!-- steps common to multiple states and events -->
    <steps run="normal flow">
      <do>check restrictions</do>
      <do>reserve position</do>
      <do>create execution orders</do>
      <do>send execution orders to EMS</do>
    </steps>
    
    <state name="initial" base-state="default" doc="starting state">
      <event on="start trading" next="live" run="normal flow"/>
    </state>

    <state name="compliance failed" base-state="default" doc="reached via the exception event">
      <event on="order cancelled" next="live" run="normal flow"/>
    </state>
    
    <state name="locate stock" base-state="default" doc="reached via the exception event">
      <event on="stock located" next="live" run="normal flow"/>
      <event on="order cancelled" next="live" run="normal flow"/>
    </state>
    
    <state name="execution order creation failure" base-state="default" doc="reached via the exception event">
      <event on="order cancelled" next="live" run="normal flow"/>
      <event on="retry" next="live" run="normal flow"/>
      <event on="end of day" next="trading day ended">
        <do>cancel position reservation</do>
      </event>
    </state>
    
    <state name="live" base-state="default" doc="execution order(s) are live in the EMS">
      <event on="end of day" next="trading day ended">
        <do>withdraw from EMS</do>
        <do>cancel position reservation</do>
      </event>      
      <event on="withdraw" next="not trading">
        <do>withdraw from EMS</do>
      </event>
      <event on="cancel" next="cancelled">
        <do>withdraw from EMS</do>
        <do>cancel position reservation</do>        
      </event>
    </state>

    <state name="not trading" base-state="default" doc="execution orders have been withdrawn from the EMS">
      <event on="start trading" next="live">
        <do>send execution orders to EMS</do>
      </event>
      <event on="cancel" next="cancelled">
        <do>cancel position reservation</do>
      </event>
     <event on="end of day" next="trading day ended">
        <do>cancel position reservation</do>
      </event>      
    </state>

    <state name="trading day ended" base-state="default" doc="some time after the exchange closes">
      <event on="start trading" next="live" run="normal flow"/>
    </state>

    <superstate name="default" doc="base (super) state">
      <event on="cancel" next="cancelled"/>
      <event on="end of day" next="trading day ended"/>
      <event on="fully booked" next="complete"/>
      <event on="archive">
        <do>archive</do>
      </event>
      <event on="exception">
        <do>try to recover</do>
      </event>
      <catch on="stock locate exception" next="locate stock"/>
      <catch on="restriction exception" next="compliance failed"/>
      <catch on="position limit exception" next="compliance failed"/>
    </superstate>

    <state name="complete" terminal="true"/>

    <state name="cancelled" terminal="true"/>
  </script>


  
  <script name="broker orders" transaction="true">
    <!-- steps common to multiple states and events -->
    <steps run="allocate and book">
        <do>fairly allocate</do>
        <do>check details</do> 
        <do>request booking</do>
    </steps>

    <superstate name="amendable">
      <event on="amend" next="booking requested" run="allocate and book">
        <do>save amendment</do>
      </event>
      <event on="cancel" next="cancelled"/>
      <event on="booking cancelled" next="cancelled"/>
      <event on="archive">
        <do>archive</do>
      </event>
      <event on="exception">
        <do>try to recover</do>
      </event>
    </superstate>

    <superstate name="not amendable">
      <event on="booking cancelled" next="cancelled"/>
      <event on="archive">
        <do>archive</do>
      </event>
      <event on="exception">
        <do>try to recover</do>
      </event>
    </superstate>
    
    <state name="booking" base-state="not amendable">
      <event on="new broker order" next="booking requested" run="allocate and book">
        <do>save broker order</do>
      </event>
    </state>
    
    <state name="fair allocation failed" base-state="amendable">
      <event on="retry" next="booking requested" run="allocate and book"/>
    </state>
    
    <state name="booking requested" base-state="not amendable">
      <event on="accepted"/>
      <event on="complete" next="complete">
        <do>successfully booked</do>
      </event>
      <event on="failed" next="failed"/>      
    </state>
    
    <state name="complete" base-state="amendable">
      <event on="cancel" next="cancelling">
        <do>request booking cancellation</do>
      </event>
    </state>
    
    <state name="failed" base-state="amendable">
      <event on="retry" next="booking requested">
        <do>request booking</do>
      </event>
    </state>
    
    <state name="cancelling" base-state="not amendable">
    </state> 
 
    <state name="cancelled" terminal="true"/>

  </script>
</oms>
