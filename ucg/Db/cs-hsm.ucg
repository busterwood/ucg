.template on
using System;
using System.Diagnostics;
.if string(@transaction)
using System.Transactions;
.endif

#region Original model
/*
.writemodel
*/
#endregion
.foreach state
.  inherit ../superstate[@name='$(@base-state)']
.  foreach event
.    merge ../../steps[@run='$(@run)']
.  endfor
.endfor

namespace $(../@cs-namespace)
{
	/// <summary>Hierarchical State Machine implementation of $(@name)</summary>
	/// <remarks>GENERATED CODE - any change to this code will be lost when the code is regenerated.</remarks>
	public partial class $(@name:p)StateMachine	
	{
	    private readonly Stopwatch clock = new Stopwatch();

		public State Current { get; private set; }

		public Exception Exception { get; private set; }
		
		public bool IsTerminal 
		{ 
			get 
			{
				switch (Current) 
				{
.foreach state[@terminal]
					case State.$(@name:p):
						return true;
.endfor				
					default:
						return false;
				}
			}
		}
		
		/// <summary>Raised after the state has been changed changing the current state. Passed the "old" state and "new" state.</summary>
		public event Action<State, State> StageChanged;

		/// <summary>Raised before performing an action in response to an event</summary>
		public event Action<Event, Actions> BeforeAction;
		
		/// <summary>Raised after performing an action in response to an event</summary>
		public event Action<Event, Actions, TimeSpan> AfterAction;

		public void HandleEvent(Event evt)
		{
			switch (Current) 
			{
.foreach state[not(@terminal) and not(@name='default')]
				case State.$(@name:p):
					$(@name:p)State(evt);
					break;
.endfor				
				default:
					if (IsTerminal) 
						InvalidEvent(evt); 
					else
						InvalidState();
					break;
			}
		}
.foreach state[not(@terminal) and not(@name='default')]

.  if string(@doc)
		/// <summary>$(@doc)</summary>
.  endif
		private void $(@name:p)State(Event evt)
		{
.  if catch
			try
			{
.  endif
			switch (evt)
			{
.	foreach event
				case Event.$(@on:p):
.	if string(../../@transaction)
					using (var txn = new TransactionScope())
					{
.		foreach do
						Do$(text():p)(evt);
.		endfor
.		if string(@next)
						DoChangeState(State.$(@next:p));
.		endif
						txn.Complete();
					}				
.	else
.		foreach do
					Do$(text():p)(evt);
.		endfor
.		if string(@next)
					DoChangeState(State.$(@next:p));
.		endif
.	endif
					break;
.	endfor
				default:
					InvalidEvent(evt); 
					break;
			}
.  if catch
			}
.  endif
.  foreach catch
			catch ($(@on:p) ex) 
			{
.    if string(../../@transaction)
				using (var txn = new TransactionScope())
				{
					SetException(ex);
.		if string(@next)
					DoChangeState(State.$(@next:p));
.		endif		
					txn.Complete();
				}			
.    else
				SetException(ex);
.		if string(@next)
				DoChangeState(State.$(@next:p));
.		endif				
.    endif
			}
.  endfor
		}
.endfor		

		public void SetState(State newState)
		{
.	if string(../../@transaction)
			using (var txn = new TransactionScope())
			{
				DoChangeState(newState);
				txn.Complete();
			}				
.	else
			DoChangeState(newState);
.	endif
		}

		protected void DoChangeState(State newState)
		{
			if (Current == newState) return;
			var oldState = Current;
			Current = newState;
			StateChanged(oldState, newState);
		}

		internal virtual void OnStateChanged(State oldState, State newState)
		{
			StageChanged?.Invoke(oldState, newState);
		}

		internal virtual void SetException(Exception ex)
		{
			Exception = ex;
		}

		internal virtual void InvalidState() 
		{
			throw new InvalidOperationException($"Invalid state {Current}");
		}

		internal virtual void InvalidEvent(Event evt) 
		{
			throw new InvalidOperationException($"Invalid event {evt} for state {Current}");
		}
		
		protected virtual void OnBefore(Event evt, Actions act)
		{
			BeforeAction?.Invoke(evt, act);
		}
		
		protected virtual void OnAfter(Event evt, Actions act, TimeSpan elasped)
		{
			AfterAction?.Invoke(evt, act, elasped);
		}
.foreach distinct-values(.//do)

		private void Do$(text():p)(Event evt)
		{
			clock.Restart();
			OnBefore(evt, Actions.$(text():p));
			$(text():p)();
			OnAfter(evt, Actions.$(text():p), clock.Elapsed);
		}

		partial void $(text():p)();
.endfor

		public enum State : byte
		{
.foreach state
			$(@name:p),
.endfor
		}

		public enum Event : byte
		{
.foreach distinct-values(.//event)
			$(@on:p),
.endfor
		}

		public enum Actions : byte
		{
.foreach distinct-values(.//do)
			$(text():p),
.endfor
		}
	}
.foreach distinct-values(//catch)
	
	public partial class $(@on:p) : Exception
	{
	}
.endfor
}