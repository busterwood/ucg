.template on
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Threading.Tasks;
using BusterWood.Mapper;

namespace $(../@cs-namespace)
{
	public class $(@name:p)Repository
	{
		readonly SqlTableType $(@name:p)TableType = new SqlTableType
		(
			"$(@name:u_)_TABLE_TYPE",
			new SqlMetaData("SEQ", SqlDbType.Int),
.foreach field
			new SqlMetaData("$(@name:u_)", SqlDbType.$(@db-type??@type)$(@db-size:,))$(",":~)
.endfor
		);

		readonly IDbConnectionFactory _connectionFactory;

		public $(@name:p)Repository(IDbConnectionFactory connectionFactory) 
		{
			if (connectionFactory == null)
				throw new ArgumentNullException();
			_connectionFactory = connectionFactory;
		}

		public List<$(../@name:p)> SelectAll()
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return cnn.QueryProc("dbo.$(@name:u_)_SelectAll").ToList<$(@name:p)>();
			}
		}
		
		public Task<List<$(../@name:p)>> SelectAllAsync()
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return cnn.QueryProcAsync("dbo.$(@name:u_)_SelectAll").ToListAsync<$(@name:p)>();
			}
		}
.foreach field[@pk]

		public $(../@name:p) SelectBy$(@name:p)($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return cnn.QueryProc("dbo.$(../@name:u_)_SelectBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) }).SingleOrDefault<$(../@name:p)>();
			}
		}

		public async Task<$(../@name:p)> SelectBy$(@name:p)Async($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return await cnn.QueryProcAsync("dbo.$(../@name:u_)_SelectBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) }).SingleOrDefaultAsync<$(../@name:p)>();
			}
		}
.endfor
.foreach field[@fk-rel]

		public List<$(../@name:p)> SelectBy$(@name:p)($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return cnn.QueryProc("dbo.$(../@name:u_)_SelectBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) }).ToList<$(../@name:p)>();
			}
		}

		public async Task<List<$(../@name:p)>> SelectBy$(@name:p)Async($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				return await cnn.QueryProcAsync("dbo.$(../@name:u_)_SelectBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) }).ToListAsync<$(../@name:p)>();
			}
		}
.endfor

		public $(@name:p) Save($(@name:p) item)
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				var args = new 
				{
.foreach field
					$(@name:u_) = $(@name:c)$(",":~)
.endfor
				};
				return cnn.QueryProc("dbo.$(@name:u_)_Merge", args).Single<$(@name:p)>();
			}
		}

		public async Task<$(@name:p)> SaveAsync($(@name:p) item)
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				var args = new 
				{
.foreach field
					$(@name:u_) = $(@name:c)$(",":~)
.endfor
				};
				return await cnn.QueryProcAsync("dbo.$(@name:u_)_Merge", args).SingleAsync<$(@name:p)>();
			}
		}

		public List<$(@name:p)> Save(IEnumerable<$(@name:p)> values)
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				var items = values.ToSqlTable($(@name:p)TableType, (rec, _, i) => rec.SetInt32(0, i));
				var results = cnn.QueryProc("dbo.$(@name:u_)_MergeTable", new { items }).ToList<$(@name:p)WithSeq>();
				results.Sort((l, r) => l.Seq.CompareTo(r.Seq));
				return results.ToList<$(@name:p)>();
			}
		}

		public async Task<List<$(@name:p)>> SaveAsync(IEnumerable<$(@name:p)> values)
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				var items = values.ToSqlTable($(@name:p)TableType, (rec, _, i) => rec.SetInt32(0, i));
				var results = await cnn.QueryProcAsync("dbo.$(@name:u_)_MergeTable", new { items }).ToListAsync<$(@name:p)WithSeq>();
				results.Sort((l, r) => l.Seq.CompareTo(r.Seq));
				return results.ToList<$(@name:p)>();
			}
		}

		internal class $(@name:p)WithSeq : $(@name:p) 
		{
			public int Seq { get; set; }
		}

.foreach field[@pk]

		public void DeleteBy$(@name:p)($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				cnn.ExecuteProc("dbo.$(../@name:u_)_DeleteBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) });
			}
		}

		public async Task DeleteBy$(@name:p)Async($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				await cnn.ExecuteProcAsync("dbo.$(../@name:u_)_DeleteBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) });
			}
		}
.endfor
.foreach field[@fk-rel]

		public void DeleteBy$(@name:p)($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				cnn.ExecuteProc("dbo.$(../@name:u_)_DeleteBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) });
			}
		}

		public async Task DeleteBy$(@name:p)Async($(@type) $(@name:c))
		{
			using (var cnn = _connectionFactory.Create()) 
			{
				await cnn.ExecuteProcAsync("dbo.$(../@name:u_)_DeleteBy_$(@name:u_)", new { $(@name:u_) = $(@name:c) });
			}
		}
.endfor

	}
}
